{"version":3,"sources":["Header.js","Moves.js","Square.js","Board.js","constants/constants.js","Puzzle/index.js","Game.js","App.js","index.js"],"names":["Header","className","Component","Moves","this","props","moves","Square","number","Board","cols","i","numberDiv","key","numbers","rowSeperationDiv","push","Directions","UP","DOWN","LEFT","RIGHT","PuzzleConstants","EmptyTile","Puzzle","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getEmptyIndex","a","getNeighbour","index","direction","indexOf","checkWin","Game","state","newGame","gameDiv","React","createRef","focusGameDiv","current","focus","onKeyDown","handleKeyPress","bind","tabIndex","ref","onBlur","e","preventDefault","keyCode","makeMove","emptyIndex","neighbourIndex","slice","isSolved","alert","setState","console","log","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4753bb0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <h3>Puzzle Game</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Moves extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"moves\">\r\n                <p>\r\n                    <strong>Moves : {this.props.moves}</strong>\r\n                    <i>Use arrow keys to move numbers</i>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Moves;","import React, { Component } from 'react';\r\n\r\nclass Square extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"square\">\r\n                {this.props.number}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Square;","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends Component {\r\n    render() {\r\n        var cols = [];\r\n        for(let i=0; i<16; i++)\r\n        {\r\n            var numberDiv = <div key={\"square-\"+i} className=\"column\">\r\n                                <Square number={this.props.numbers[i]} />\r\n                            </div>;\r\n            var rowSeperationDiv = <div key={\"row-\"+i} className=\"w-100\"></div>;\r\n\r\n            if(i%4 === 0 && i!==0)\r\n            {\r\n                cols.push(rowSeperationDiv);\r\n            }\r\n            cols.push(numberDiv);\r\n        }\r\n        return (\r\n            <div className=\"board-container\">\r\n                <div className=\"board\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            {cols}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","export const Directions = {\r\n    UP: \"UP\",\r\n    DOWN: \"DOWN\",\r\n    LEFT: \"LEFT\",\r\n    RIGHT: \"RIGHT\"\r\n}\r\n\r\nexport const PuzzleConstants = {\r\n    EmptyTile: '?'\r\n};","import { Directions, PuzzleConstants } from \"../constants/constants\";\r\n\r\nfunction shuffle(array) \r\n{\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    while (0 !== currentIndex) {\r\n  \r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction getEmptyIndex(a) \r\n{\r\n    for(let i=0; i<15; i++)\r\n    {\r\n        if(a[i] === PuzzleConstants.EmptyTile)\r\n        {\r\n            return i;\r\n        }\r\n    }\r\n    return -1; // error case\r\n}\r\n\r\nfunction getNeighbour(index, direction)\r\n{\r\n    switch(direction)\r\n    {\r\n        case Directions.UP     : return ([12, 13, 14, 15]).indexOf(index) === -1 ? index+4 : -1;\r\n        case Directions.DOWN   : return ([0, 1, 2, 3]).indexOf(index) === -1 ? index-4 : -1;\r\n        case Directions.LEFT   : return ([3, 7, 11, 15]).indexOf(index) === -1 ? index+1 : -1;\r\n        case Directions.RIGHT  : return ([0,4,8,12]).indexOf(index) === -1 ? index-1 : -1;\r\n        default     : return -1; // wrong direction - error case\r\n    }\r\n}\r\n\r\nfunction checkWin(a) \r\n{\r\n    for(let i=0; i<15; i++)\r\n    {\r\n        if(a[i] !== i+1)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const Puzzle = {\r\n    shuffle: shuffle,\r\n    getEmptyIndex: getEmptyIndex,\r\n    getNeighbour: getNeighbour,\r\n    checkWin: checkWin\r\n}","import React, { Component } from 'react';\r\nimport Moves from './Moves';\r\nimport Board from './Board';\r\nimport { Directions, PuzzleConstants } from './constants/constants';\r\nimport {Puzzle} from './Puzzle'\r\nclass Game extends Component {\r\n    constructor(props) \r\n    {\r\n        super(props);\r\n        this.state = this.newGame();\r\n\r\n        this.gameDiv = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.focusGameDiv();\r\n    }\r\n    \r\n    // forced focus\r\n    focusGameDiv()\r\n    {\r\n        this.gameDiv.current.focus();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"game\" onKeyDown={this.handleKeyPress.bind(this)} tabIndex=\"0\" ref={this.gameDiv} onBlur={() => this.focusGameDiv()} >\r\n                <Moves moves={this.state.moves} />\r\n                <Board numbers={this.state.numbers} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleKeyPress(e)\r\n    {\r\n        e.preventDefault();\r\n        switch (e.keyCode) \r\n        {\r\n            case 37:\r\n                this.makeMove(Directions.LEFT)\r\n                break;\r\n            case 38:\r\n                this.makeMove(Directions.UP)\r\n                break;\r\n            case 39:\r\n                this.makeMove(Directions.RIGHT)\r\n                break;\r\n            case 40:\r\n                this.makeMove(Directions.DOWN)\r\n                break;\r\n            default  : break;\r\n        }\r\n    }\r\n\r\n    makeMove(direction) \r\n    {\r\n        \r\n        var emptyIndex = this.state.emptyIndex;\r\n        var neighbourIndex = Puzzle.getNeighbour(emptyIndex, direction);\r\n        \r\n        if(neighbourIndex !== -1)\r\n        {\r\n            var numbers = this.state.numbers.slice();\r\n            numbers[emptyIndex] = numbers[neighbourIndex];\r\n            numbers[neighbourIndex] = PuzzleConstants.EmptyTile;\r\n            emptyIndex = neighbourIndex;\r\n            \r\n            var isSolved = Puzzle.checkWin(numbers);\r\n            if(isSolved === true)\r\n            {\r\n                alert(\"you solved the puzzle !!\");\r\n                this.setState(this.newGame());\r\n            }\r\n            else\r\n            {\r\n                this.setState({\r\n                    numbers : numbers,\r\n                    isSolved : isSolved,\r\n                    moves : this.state.moves + 1,\r\n                    emptyIndex : emptyIndex\r\n                });\r\n            }\r\n        }  \r\n        \r\n    }\r\n\r\n    newGame()\r\n    {\r\n        var numbers = Puzzle.shuffle([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,PuzzleConstants.EmptyTile]);\r\n        var emptyIndex = Puzzle.getEmptyIndex(numbers);\r\n        console.log(numbers);\r\n        return {\r\n            moves : 0,\r\n            numbers : numbers,\r\n            emptyIndex : emptyIndex,\r\n            isSolved : true\r\n        }\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Game from './Game';\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<Header />\r\n\t\t\t\t<Game />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}